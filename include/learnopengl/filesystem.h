#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#include <string>
#include <cstdlib>
#include "root_directory.h" // This is a configuration file generated by CMake.

class FileSystem
{
private:
  typedef std::string (*Builder) (const std::string& path);

public:
  static std::string getPath(const std::string& path)
  {
    static std::string(*pathBuilder)(std::string const &) = getPathBuilder();
    return (*pathBuilder)(path);
  }

private:
    static std::string const& getRoot()
    {
        static char* envRoot = nullptr;
        static std::string root;

        if (envRoot == nullptr)
        {
            size_t requiredSize = 0;
            if (_dupenv_s(&envRoot, &requiredSize, "LOGL_ROOT_PATH") == 0 && envRoot != nullptr)
            {
                root = envRoot;
                free(envRoot); // Free the allocated memory
            }
            else
            {
                root = logl_root != nullptr ? logl_root : "";
            }
        }

        return root;
    }

  //static std::string(*foo (std::string const &)) getPathBuilder()
  static Builder getPathBuilder()
  {
    if (getRoot() != "")
      return &FileSystem::getPathRelativeRoot;
    else
      return &FileSystem::getPathRelativeBinary;
  }

  static std::string getPathRelativeRoot(const std::string& path)
  {
    return getRoot() + std::string("/") + path;
  }

  static std::string getPathRelativeBinary(const std::string& path)
  {
    return "../../../" + path;
  }


};

// FILESYSTEM_H
#endif
